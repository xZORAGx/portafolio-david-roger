---
interface Props {
  images: string[];
  projectName: string;
}

const { images, projectName } = Astro.props;
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="relative w-full h-full bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 rounded-2xl overflow-hidden touch-pan-x">
  <div class="carousel-container relative w-full h-full" data-carousel-id={carouselId}>
    <div class="carousel-track flex transition-transform duration-500 ease-in-out h-full" id={`carousel-track-${carouselId}`} style={`width: ${images.length * 100}%`}>
      {images.map((image, index) => (
        <div class="carousel-slide flex-shrink-0 relative" style={`width: ${100 / images.length}%`}>
          <div class="w-full h-full relative overflow-hidden">
            <img 
              src={image} 
              alt={`${projectName} - Imagen ${index + 1}`}
              class="w-full h-full object-contain bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 select-none"
              onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              loading="lazy"
              draggable="false"
            />
            
            <!-- Fallback placeholder -->
            <div class="w-full h-full gradient-bg flex items-center justify-center relative" style="display: none;">
              <!-- Overlay pattern -->
              <div class="absolute inset-0 opacity-10">
                <div class="absolute inset-0" style="background-image: radial-gradient(circle at 2px 2px, rgba(255,255,255,0.3) 1px, transparent 0); background-size: 20px 20px;"></div>
              </div>
              
              <!-- Content -->
              <div class="text-white text-center p-8 relative z-10">
                <div class="w-24 h-24 mx-auto mb-8 bg-white/20 backdrop-blur-sm rounded-3xl flex items-center justify-center">
                  <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                  </svg>
                </div>
                <h3 class="text-2xl md:text-3xl font-bold mb-4">{projectName}</h3>
                <p class="text-lg opacity-90 font-medium mb-6">Imagen {index + 1} de {images.length}</p>
                <div class="mt-6 px-6 py-3 bg-white/20 backdrop-blur-sm rounded-full text-sm font-semibold inline-block">
                  Próximamente: Capturas reales del proyecto
                </div>
                <p class="text-sm opacity-75 mt-4 max-w-md mx-auto leading-relaxed">
                  Aquí se mostrarán las capturas de pantalla reales de la aplicación en funcionamiento
                </p>
              </div>

              <!-- Gradient overlay for better text readability -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-black/30"></div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <button 
      class="carousel-btn absolute left-2 sm:left-6 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/60 text-white p-2 sm:p-4 rounded-full transition-all duration-300 z-20 group touch-manipulation"
      onclick={`previousSlide('${carouselId}')`}
      aria-label="Imagen anterior"
    >
      <svg class="w-4 h-4 sm:w-6 sm:h-6 transition-transform group-hover:-translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>

    <button 
      class="carousel-btn absolute right-2 sm:right-6 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/60 text-white p-2 sm:p-4 rounded-full transition-all duration-300 z-20 group touch-manipulation"
      onclick={`nextSlide('${carouselId}')`}
      aria-label="Siguiente imagen"
    >
      <svg class="w-4 h-4 sm:w-6 sm:h-6 transition-transform group-hover:translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M9 5l7 7-7 7"/>
      </svg>
    </button>

    <div class="absolute bottom-4 sm:bottom-8 left-1/2 -translate-x-1/2 flex gap-2 sm:gap-4 z-20">
      {images.map((_, index) => (
        <button 
          class={`carousel-dot w-3 h-3 sm:w-4 sm:h-4 rounded-full transition-all duration-300 touch-manipulation ${index === 0 ? 'bg-white scale-125' : 'bg-white/50'}`}
          onclick={`goToSlide('${carouselId}', ${index})`}
          aria-label={`Ir a imagen ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</div>

<script is:inline>
  window.carouselInstances = window.carouselInstances || {};

  window.initCarousel = function(carouselId, totalSlides) {
    if (window.carouselInstances[carouselId]) {
      return;
    }

    const instance = {
      currentSlide: 0,
      totalSlides: totalSlides,
      autoSlideInterval: null,
      track: document.getElementById(`carousel-track-${carouselId}`),
      container: document.querySelector(`[data-carousel-id="${carouselId}"]`)
    };

    function updateCarousel() {
      if (instance.track) {
        const translateX = -(instance.currentSlide * (100 / instance.totalSlides));
        instance.track.style.transform = `translateX(${translateX}%)`;
      }
      
      // Update dots
      const dots = instance.container?.querySelectorAll('.carousel-dot');
      if (dots) {
        dots.forEach((dot, index) => {
          if (index === instance.currentSlide) {
            dot.classList.remove('bg-white/50');
            dot.classList.add('bg-white', 'scale-125');
          } else {
            dot.classList.remove('bg-white', 'scale-125');
            dot.classList.add('bg-white/50');
          }
        });
      }
    }

    function startAutoSlide() {
      if (instance.autoSlideInterval) {
        clearInterval(instance.autoSlideInterval);
      }
      instance.autoSlideInterval = setInterval(() => {
        instance.currentSlide = (instance.currentSlide + 1) % instance.totalSlides;
        updateCarousel();
      }, 4000);
    }

    function pauseAutoSlide() {
      if (instance.autoSlideInterval) {
        clearInterval(instance.autoSlideInterval);
      }
    }

    instance.nextSlide = function() {
      instance.currentSlide = (instance.currentSlide + 1) % instance.totalSlides;
      updateCarousel();
    };

    instance.previousSlide = function() {
      instance.currentSlide = (instance.currentSlide - 1 + instance.totalSlides) % instance.totalSlides;
      updateCarousel();
    };

    instance.goToSlide = function(index) {
      instance.currentSlide = index;
      updateCarousel();
    };

    updateCarousel();
    startAutoSlide();
    
    if (instance.container) {
      instance.container.addEventListener('mouseenter', pauseAutoSlide);
      instance.container.addEventListener('mouseleave', startAutoSlide);
    }

    window.carouselInstances[carouselId] = instance;
  };

  window.nextSlide = function(carouselId) {
    if (window.carouselInstances[carouselId]) {
      window.carouselInstances[carouselId].nextSlide();
    }
  };

  window.previousSlide = function(carouselId) {
    if (window.carouselInstances[carouselId]) {
      window.carouselInstances[carouselId].previousSlide();
    }
  };

  window.goToSlide = function(carouselId, index) {
    if (window.carouselInstances[carouselId]) {
      window.carouselInstances[carouselId].goToSlide(index);
    }
  };

  document.addEventListener('DOMContentLoaded', function() {
    initializeAllCarousels();
  });

  if (document.readyState === 'loading') {
  } else {
    setTimeout(initializeAllCarousels, 100);
  }

  function initializeAllCarousels() {
    document.querySelectorAll('[data-carousel-id]').forEach(container => {
      const carouselId = container.getAttribute('data-carousel-id');
      const slides = container.querySelectorAll('.carousel-slide');
      if (carouselId && slides.length > 0 && !window.carouselInstances[carouselId]) {
        const isVisible = !container.closest('.hidden') && container.offsetWidth > 0;
        if (isVisible) {
          window.initCarousel(carouselId, slides.length);
        }
      }
    });
  }

  window.reinitializeCarousels = function() {
    setTimeout(() => {
      initializeAllCarousels();
    }, 100);
  };
</script>

<style>
  .carousel-container {
    position: relative;
    overflow: hidden;
    border-radius: 1rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }
  
  .carousel-track {
    display: flex;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .carousel-slide {
    flex-shrink: 0;
    position: relative;
  }
  
  .carousel-btn {
    backdrop-filter: blur(10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0.8;
    border: 2px solid rgba(255, 255, 255, 0.2);
  }
  
  .carousel-btn:hover {
    opacity: 1;
    transform: translateY(-50%) scale(1.15);
    background: rgba(0, 0, 0, 0.8);
    border-color: rgba(255, 255, 255, 0.4);
  }
  
  .carousel-btn:active {
    transform: translateY(-50%) scale(1.05);
  }
  
  .carousel-dot {
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 2px solid rgba(255, 255, 255, 0.3);
  }
  
  .carousel-dot:hover {
    transform: scale(1.3);
    border-color: rgba(255, 255, 255, 0.6);
  }
  
  .carousel-dot.active {
    background: white !important;
    transform: scale(1.25);
    border-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  }

  /* Image placeholder improvements */
  .carousel-slide .gradient-bg {
    background: linear-gradient(135deg, 
      rgba(59, 130, 246, 0.9) 0%, 
      rgba(147, 51, 234, 0.9) 25%,
      rgba(219, 39, 119, 0.9) 50%,
      rgba(239, 68, 68, 0.9) 75%,
      rgba(245, 158, 11, 0.9) 100%);
    backdrop-filter: blur(20px);
  }

  /* Loading animation */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }

  .carousel-slide:not(.loaded) .gradient-bg {
    animation: pulse 2s infinite;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .carousel-btn {
      padding: 0.75rem;
      left: 1rem;
      right: 1rem;
    }
    
    .carousel-btn svg {
      width: 1.25rem;
      height: 1.25rem;
    }
    
    .carousel-dot {
      width: 0.75rem;
      height: 0.75rem;
    }

    /* Adjust content for mobile */
    .carousel-slide .text-center h3 {
      font-size: 1.5rem;
    }
    
    .carousel-slide .text-center p {
      font-size: 1rem;
    }
  }

  @media (min-width: 1024px) {
    .carousel-btn {
      padding: 1rem;
    }
    
    .carousel-btn svg {
      width: 1.75rem;
      height: 1.75rem;
    }
  }
</style>
